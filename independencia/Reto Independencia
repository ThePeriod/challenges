{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RETO INDEPDENDENCIA\n",
    "\n",
    "Desarrollado por Dante Chavez como requisito para avanzar en la convocatoria para la posición de Data Scientist en Independencia."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ACME ©\n",
    "![p1.jpg](p1.jpg)\n",
    "## Proceso de Calificación de Solicitudes de Crédito\n",
    "#### Creado para el Banco ACME que forma parte de la Corporación ACME (_**A C**ompany that **M**akes __E__verything_)\n",
    " \n",
    " \n",
    "Hola, gracias por confiar en nosotros. **El Banco Digital para seres Humanos.**\n",
    "\n",
    "Tenemos el compromiso de acercar la banca a *todos*.\n",
    "Y con esta consigna te presentamos cómo evaluamos tu solicitud de préstamo de manera muy sencilla.\n",
    "\n",
    "Como debes recordar, recogimos tus datos personales para que puedan ser evaluados y otorgarte el crédito.\n",
    "De la misma forma hicimos con nuestros clientes antiguos desde que iniciamos nuestras operaciones en el país, además les dimos seguimiento y es así como sabemos si son __pagadores__ o si son __deudores__.\n",
    "\n",
    "### Premisa:\n",
    "Los clientes pagadores tanto como los deudores tienen ciertas características que los diferencian, conocer cuáles son estas diferencias nos permitira identificar si tu tienes la capacidad de pago del crédito que has solicitado al reconocer si tu información personal se asemeja al grupo de deudores o al de pagadores.\n",
    "\n",
    "### ¿Y qué tan fácil es saber si puedo ser un _pagador_ o un _deudor_?\n",
    "No es facil.\n",
    "\n",
    "![chihuahua-muffin-2.jpg](chihuahua-muffin-2.jpg)\n",
    "\n",
    "En esta foto, identificar un perro chihuahua de un muffin es fácil para los humanos como nosotros porque sabemos qué es un chihuahua y qué es un muffin sin importar que tan parecidos sean los chihuahuas de la foto entre sí.\n",
    "Imagina que no supiesemos qué es un perro chihuahua ni lo que es un muffin, ni siquiera lo que es un perro y solo nos mostrasen las fotos y nos indiquen que hay 2 grupos, uno es de \"perros chihuahua\" y otro es de \"muffins\".\n",
    "\n",
    "Ese es el problema que necesitamos resolver.\n",
    "\n",
    "De los datos de nuestros clientes pasados tenemos 2 grupos: los pagadores y los deudores, que al igual que en la foto, no son exactamente iguales dentro de cada grupo, esto es, que no todos los deudores vienen del mismo distrito o que no todos alquilan un domicilio.\n",
    "\n",
    "Cuando ingresas tu registro de solicitud queremos saber si la información que tenemos de ti te clasificaría en el grupo de pagadores o deudores.\n",
    "\n",
    "Ese tipo de clasificación se realizan mediante técnicas de _Machine Learning_.\n",
    "Y aquí, en ACME lo resolvemos en 4 pasos:\n",
    "\n",
    "![metod.jpg](metod.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A, de Analizar:\n",
    "\n",
    "Para poder realizar la clasificación de la manera más acertada posible debemos asegurarnos que la información que ingresa es clara y define por completo al __pagador__ o al __deudor__.\n",
    "\n",
    "Retomemos el ejemplo de los chihuahuas, si tuviesemos un chihuahua que sale junto a un auto, donde el auto ocupa mas de la mitad del espacio de la foto, esto no nos ayudaría a la clasificación, sino que, al contrario, la complicaría aún mas.\n",
    "\n",
    "En el paso **Analizar**, se realiza lo que a nivel técnico se conoce como **Análisis Exploratorio de Datos**. Esto consiste en analizar de manera explorativa los datos históricos que tenemos de nuestra base de datos de clientes, que valores existen y que problemas podrían presentarse que nos haga pensar en el siguiente paso que es la **Limpieza de Datos**.\n",
    "\n",
    "### El Diccionario de Datos.\n",
    "Contamos con los datos de las 14 campos de nuestra base de datos. Los datos acerca de los campos se llaman _metadatos_ y son:\n",
    "\n",
    "![schema.png](schema.png)\n",
    "\n",
    "El diccionario de datos nos servirá como linea de base para evaluar los valores reales que tenemos en nuestra base de datos.\n",
    "\n",
    "### Ya entendí, entonces, ¿Cómo es la magia?\n",
    "Bien, toda la parte **A, de Analizar** es realizado en el lenguaje de programación Python, que básicamente son instrucciones escritas por un programador que la máquina interpreta y ejecuta. Independientemente del lenguaje de programación usado, el conjunto de instrucciones que tienen uno o varios propósitos determinados se conocen como *bloque de código* o simplemente *código*.\n",
    "\n",
    "El código para realizar el paso uno se puede leer en las siguientes párrafos. Se puede leer el propósito de cada línea de código a partir del símbolo \"#\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1894 entries, 0 to 1893\n",
      "Data columns (total 14 columns):\n",
      "id                            1894 non-null int64\n",
      "Loan Amount                   1800 non-null float64\n",
      "Term                          1850 non-null object\n",
      "State                         1894 non-null object\n",
      "Annual Income                 1822 non-null float64\n",
      "Income Verification Status    1879 non-null object\n",
      "Average Account Balance       1788 non-null float64\n",
      "Due Amount                    1853 non-null float64\n",
      "Home Ownership                1858 non-null object\n",
      "Loan Purpose                  1894 non-null object\n",
      "Due Settlement                1787 non-null object\n",
      "Installment Amount            1878 non-null float64\n",
      "Payment Plan                  1857 non-null object\n",
      "Approve Loan                  1894 non-null int64\n",
      "dtypes: float64(5), int64(2), object(7)\n",
      "memory usage: 207.2+ KB\n"
     ]
    }
   ],
   "source": [
    "# PASO 1: A, de Analizar\n",
    "# PARTE 1: CARGA DE DICCIONARIOS Y DE DATOS.\n",
    "# Importar librerias que contienen funciones que nos hacen la Limpieza de Datos más facil.\n",
    "import numpy as np # Importa numpy y le da el alias np\n",
    "import pandas as pd # Importa pandas y le da el alias pd\n",
    "import matplotlib.pyplot as plt # Importa matplotlib y le da el alias plt\n",
    "import seaborn as sns # Importa seaborn y le da el alias sns\n",
    "from scipy.special import boxcox1p # Importa el transformador Box Cox de SciPy\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "pd.set_option('max_colwidth',500)\n",
    "\n",
    "# Importar Input\n",
    "file='train.csv' # Le da al archivo imput.csv un alias 'file'\n",
    "data=pd.read_csv(file, na_values='NA') # Usa la funcion read_csv de pandas para leer input.csv y además registra los valores nulos como NA\n",
    "\n",
    "# Describe información sobre todas las variables\n",
    "data.info() # Genera la información de los datos. Esto se conoce como Metadata.\n",
    "#print(df.describe(include='all')) # Muestra los datos de las 14 variables que venían en input.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Del primer resultado, que llamaremos *output* a partir de ahora, podemos ver que la primera variable que es la identificacion del cliente (id) tiene 1894 valores. Como esta base de datos hace referencia a las solicitudes de crédito es posible encontrar mas de 1 vez a un cliente en caso de que haya solicitado mas de un crédito.\n",
    "\n",
    "### ¿Por qué las demas variables no tienen los mismos 1894 valores que corresponden al total de solicitudes de crédito?\n",
    "\n",
    "Algunos solicitantes no ingresan la totalidad de los datos que se les solicita en ACME.\n",
    "\n",
    "Por ejemplo, la segunda variable, **Loan Amount** solo tiene 1800 valores no nulos, esto significa que hay 94 solicitudes de crédito en las que se omitió incluir la cantidad de dinero solicitada.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PASO 1: A, de Analizar\n",
    "# PARTE 2: ANÁLISIS EXPLORATORIO DE DATOS\n",
    "# Analisis del primer campo str: Term\n",
    "data['Term'].unique() # Entrega los valores únicos existentes en toda la base de datos para el campo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En este output descubrimos que existen 2 opciones para elegir en los meses que se puede pagar la deuda:\n",
    "* 36 meses\n",
    "* 60 meses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Term'].value_counts() # Entrega un conteo de cuantas veces aparece cada valor que toma el campo en la base de datos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En este output vemos que la cantidad de solicitudes de 36 meses es considerablemente mayor a las de 60 meses. Apoximadamente en una razón de 10 a 37."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['State'].unique() # Entrega los valores únicos existentes en toda la base de datos para el campo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En este output descubrimos que hay 49 estados diferentes desde donde nuestros clientes potenciales realizan su solicitud de crédito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['State'].value_counts() # Entrega un conteo de cuantas veces aparece cada valor que toma el campo en la base de datos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El resultado de este Output es muy importante, tenemos algunos estados que tienen muy pocas solicitudes por lo que sera necesario determinar qué Estados terminarían quedando dentro del modelamiento. Mi criterio para esta ocasión es seleccionar aquellos Estados que tengan 10 o más solicitudes de crédito.\n",
    "\n",
    "### ¿Por qué se tendría que hacer eso?\n",
    "Recuerda que nuestra solucion al problema requiere que, sin tener definidas las características de quienes son los clientes pagadores ni los deudores podamos descubrir estas a partir de nuestra base de datos histórica. Entonces, tener valores demasiado específicos no nos ayuda a **generalizar**.\n",
    "\n",
    "La solución, que es el modelo resultante, necesariamente tiene que generalizar nuevos casos, y al contrario de lo que se puede pensar, un modelo muy específico termina siendo menos útil que uno que puede generalizar.\n",
    "\n",
    "### ¿Puedes explicarlo con un ejemplo?\n",
    "Claro, en nuestra base de datos tenemos entre los 1894 solicitudes de credito la que tiene id 824, es la unica persona que viene de Dakota del Norte, alquila una casa, tiene un ingreso mensual de 42000, cantidad que no ha sido verificada y se le ha otorgado el crédito.\n",
    "\n",
    "Si tu tuvieras que otorgar el prestamo y teniendo este solo caso único podrías decir que ¿Todas las personas que compartan estas precisas características deberían tener aprobadas sus solicitudes?.\n",
    "\n",
    "De la misma manera en que no es verdad que _todos los hombres son iguales_ y en general, cualquier afirmación _non plus ultra_ (Todos los X son Y o Ningún A es B) suele ser inválida. No es posible determinar si la siguiente persona con las mismas caracteristicas debería ser acreedora a un crédito.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data[data.State=='ND'] - Este es el ejemplo en el parrafo anterior.\n",
    "data['Income Verification Status'].value_counts() # Entrega un conteo de cuantas veces aparece cada valor que toma el campo en la base de datos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Efectvamente, los valores que puede tomar el Estado de Verificación del Ingreso son:\n",
    "* Parcialmente Verificado\n",
    "* Verificado\n",
    "* No Verificado\n",
    "\n",
    "No hay muchas diferencias entre las frecuencias de cada una de las opciones por lo que podemos decir que _tienen un buen balance_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Home Ownership'].value_counts() # Entrega un conteo de cuantas veces aparece cada valor que toma el campo en la base de datos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.countplot(x='Home Ownership', hue='Approve Loan', data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Este Output también es importante. De manera intencional juntaré los valores de ANY con los de OWN ya que los puntos de datos de esta son muy bajos. Este cambio se realiza en el paso 2: C, de Corregir."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Loan Purpose'].value_counts() # Entrega un conteo de cuantas veces aparece cada valor que toma el campo en la base de datos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Due Settlement'].value_counts() # Entrega un conteo de cuantas veces aparece cada valor que toma el campo en la base de datos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Payment Plan'].value_counts() # Entrega un conteo de cuantas veces aparece cada valor que toma el campo en la base de datos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Asimetría de No Aprobados vs. Aprobados.\n",
    "data['Approve Loan'].value_counts()[0]/len(data['Approve Loan']) # Cantidad de No Aprobados vs. Aprobados."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Este resultado es muy bueno, no hay problemas de desbalance con la variable sobre la que queremos hacer predicción."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Media de préstamos solicitado por grupo de Aprobados y Rechazados.\n",
    "data[['Loan Amount','Approve Loan']].groupby(by='Approve Loan').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Digrama de Caja de Prestamos Solicitados entre Aprobados y Rechazados.\n",
    "plt.figure(figsize=(12,6))\n",
    "sns.boxplot(data['Loan Amount'],data['Approve Loan'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## C, de Corregir:\n",
    "\n",
    "Una vez terminada la exploración y el análisis de los datos con los que contamos en nuestra base de datos podemos decir que **conocemos** los datos, esto quiere decir que hemos identificado que variables pueden causarnos problemas y que consideraciones debemos tomar en cuenta antes de pasar nuestros datos por el algoritmo que se encargará de clasificar una nueva solicitud de crédito.\n",
    "\n",
    "Las operaciones que se realizan en este paso son:\n",
    "* **Imputación de Datos** : Se trata de completar los datos nulos con algún valor representativo a fin de no perder el aporte de esa solicitud de créditos a las demás variables.\n",
    "* **Corrección de los Errores Identificados**: A partir de las notas que se tomaron en la parte A se procede corrigiendo ya sea tranformando las variables o eliminandolas.\n",
    "* **Generación de Variables Dummy**: A partir de las variables categóricas se procede a crear nuevas variables. Se realiza en dos tiempos, primero se generan las variables dummy o variables alternativas y luego se retiran las variables originales de la base de datos.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cabecera</th>\n",
       "      <th>Nulos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>id</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Loan Amount</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Term</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>State</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Annual Income</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Income Verification Status</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Average Account Balance</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Due Amount</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Home Ownership</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Loan Purpose</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Due Settlement</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Installment Amount</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Payment Plan</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Approve Loan</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Cabecera  Nulos\n",
       "0                           id      0\n",
       "1                  Loan Amount     94\n",
       "2                         Term     44\n",
       "3                        State      0\n",
       "4                Annual Income     72\n",
       "5   Income Verification Status     15\n",
       "6      Average Account Balance    106\n",
       "7                   Due Amount     41\n",
       "8               Home Ownership     36\n",
       "9                 Loan Purpose      0\n",
       "10              Due Settlement    107\n",
       "11          Installment Amount     16\n",
       "12                Payment Plan     37\n",
       "13                Approve Loan      0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# PASO 2: C, de Corregir\n",
    "# PARTE 1: ELIMNACION DE VARIABLES\n",
    "# Ver los nulos de cada variable/campo\n",
    "d={'Cabecera':[],'Nulos':[]} # Inicializador de Nombres de Columnas y de Cantidad de Nulos en un array\n",
    "# Bloque recursivo para identficar tanto los nombres de las columnas como la cantidad de nulos existentes\n",
    "for i in data.columns:\n",
    "    d['Cabecera'].append(i)\n",
    "    d['Nulos'].append(len(data[data[i].isnull()][i]))\n",
    "nulos=pd.DataFrame(d) # Conversion de array a dataframe\n",
    "nulos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El Output de este bloque nos indica que la cantidad de Nulos es muy baja en todos los casos. Un criterio para la Elminación de Variables es determinar si la cantidad de nulos existentes supera el 50% de todos los datos. Entonces, según este criterio no eliminamos ninguna variable por exceso de nulos. Sino que se realizará **Imputación de Datos** que consiste en otorgarle un valor de las opciones existentes (en el caso de variables categoricas) o reemplaza con el promedio (en el caso de numéricas) al que en un principio era nulo. Las siguientes variables serán susceptibles de Imputación:\n",
    "* Loan Amount\n",
    "* Term\n",
    "* Annual Income\n",
    "* Income Verification Status\n",
    "* Average Account Balance\n",
    "* Due Amount\n",
    "* Home Ownership\n",
    "* Due Settlement\n",
    "* Installment Amount\n",
    "* Payment Plan\n",
    "\n",
    "Otro criterio de eliminación de variables es el retirar las constantes. Como vimos en un bloque anterior, en ninguna solicitud de crédito se ha pedido refinanciamiento, por lo que, la variable **Payment Plan** se retira del análisis. También **Id** por no hacer diferencia."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Eliminacion de variable\n",
    "data.drop(['id','Payment Plan'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PASO 2: C, de Corregir\n",
    "# PARTE 2: IMPUTACION DE DATOS\n",
    "cols_con_nulos_int=['Loan Amount', 'Annual Income', 'Average Account Balance', 'Due Amount', 'Installment Amount']\n",
    "# Revision de Histogramas para poder ver con qué se puede imputar cada variable.\n",
    "for col in cols_con_nulos_int:\n",
    "    plt.figure(figsize=(8,6))\n",
    "    sns.distplot(data[data[col].notnull()][col])\n",
    "    plt.title('Histograma de {}'.format(col))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La asimetría presente nos indica que es más conveniente realizar la Imputación mediante reemplazo con la mediana.\n",
    "\n",
    "Creamos una función en Python que realice el trabajo de imputación para aplicarlo a todas las variables que tienen por lo menos un valor nulo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# La función input_mediana permite hacer el reemplazo de los valores nulos dentro cada columna por el valor de la mediana de esa columna.\n",
    "def imput_mediana(data,col):\n",
    "    med=data[col].median()\n",
    "    data[col]=data[col].apply(lambda x: med if np.isnan(x) else x)\n",
    "    \n",
    "for col in cols_con_nulos_int:\n",
    "    imput_mediana(data,col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Luego de ejecutar la función de imputación a todas las columnas tenemos solo las variables categóricas con valores nulos pendientes.\n",
    "\n",
    "### ¿Qué se hace con las variables que no nos numéricas pero que si tienen valores nulos?\n",
    "Primero, hay que revisar que se hayan corregido lo que se encontró en el paso 1: A, de Análisis.\n",
    "Posteriormente lo que se hace es crear Variables Alternativas conocidas también como _Variables Dummy_ que estan basadas en los valores originales de las variables no numéricas.\n",
    "La función get_dummies de la biblioteca _pandas_ realiza esa operación por nosotros.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PASO 2: C, de Corregir\n",
    "# PARTE 3: Tratamiento de los problemas encontrados en el paso 1: A, de Analizar.\n",
    "# 'Term': Diferencia en sus frecuencias dentro de la base de datos de 10 a 37, a pesar del desbalance,\n",
    "# por ser solo 2 valores pasa directo al generador de variables \n",
    "# 'State': Determinar los valores que si quedaran dentro del análisis y generarle sus dummies + eliminar originales.\n",
    "estados_dentro=['CA','TX','NY','FL','NJ','NC','MI','PA','MD','AZ','MA','IL','VA','MN','AL','GA','TN','CO','OH','WA','IN','WI','NV'\n",
    "               ,'MO','LA','OK','UT','AR','MS','OR','NE','KY','SC','CT','HI','NM','KS']\n",
    "for i in estados_dentro:\n",
    "    data['State'+i]=data['State'].apply(lambda x:1 if x==i else 0)\n",
    "data.drop('State',axis=1,inplace=True)\n",
    "# 'Income Verification Status': Buen balance, van a pasar por el generador de variables sin mayor cambio.\n",
    "# 'Home Ownership': Corregir el desbalance con ANY pasandolo a OWN.\n",
    "data['Home Ownership']=data['Home Ownership'].apply(lambda x: 'OWN' if x in ['ANY'] else x)\n",
    "# 'Due Settlement': Buen balance, van a pasar por el generador de variables sin mayor cambio."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "habiendo tratado a **States** solo restan:\n",
    "* Term\n",
    "* Income Verification Status\n",
    "* Home Ownership\n",
    "* Due Settlement\n",
    "\n",
    "Recordemos que son 2 movimientos dentro de la creacion de dummies:\n",
    "* Generar los Dummies.\n",
    "* Eliminar los originales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PASO 2: C, de Corregir\n",
    "# PARTE 4: Creacion de Variables Alternativas (Dummy)\n",
    "cols_con_nulos_cat=['Term', 'Income Verification Status', 'Home Ownership', 'Due Settlement','Loan Purpose'] # Purpose no tiene nulos pero es cat\n",
    "for col in cols_con_nulos_cat:\n",
    "    data=data.join(pd.get_dummies(data[col],drop_first=True))\n",
    "data.drop(cols_con_nulos_cat,axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## M, de Modelar:\n",
    "\n",
    "Ya estamos en la parte de modelamiento.\n",
    "Una vez que sabemos qué le hacemos a los datos, replicamos esto a los datos de testeo.\n",
    "Y luego mediante un algoritmo de Aprendizaje Automático (Machine Learning) procedemos con la predicción de los valores en **Approved Loan** en base a lo que conocemos sobre la base de datos histórica.\n",
    "\n",
    "Las actividades que se realizan en este paso son:\n",
    "* **Integrar los pasos de Analizar y Corregir**: Ya que se han hecho varios cambios a los datos de entrenamiento, replicamos esos cambios a los datos de testeo.\n",
    "* **Pase de los Datos a los Algoritmos de Modelamiento**: Ya que tenemos preparados los datos de entrenamiento y de testeo procesados, procedemos con ingestar a los algoritmos de _Machine Learning_ con ellos a fin de obtener un modelo predictor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defincion de X y Y en train.csv para ajustar a los modelos.\n",
    "data_train=data\n",
    "y_train=data_train['Approve Loan']\n",
    "data_train.drop('Approve Loan',axis=1, inplace=True)\n",
    "X_train=data_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replica del tratamiento de datos a los datos de testeo (test.csv)\n",
    "data_test=pd.read_csv('test.csv')\n",
    "output_id=data_test['id']\n",
    "data_test.drop(['id','Payment Plan'], axis=1, inplace=True) # Eliminacion de variable en test\n",
    "for col in cols_con_nulos_int:\n",
    "    imput_mediana(data_test,col) # Imputacion de datos con la mediana en test\n",
    "for i in estados_dentro:\n",
    "    data_test['State'+i]=data_test['State'].apply(lambda x:1 if x==i else 0) # Creación recursiva de variables dummy con base en State para test\n",
    "data_test.drop('State',axis=1,inplace=True) # Eliminacion de State en test\n",
    "data_test['Home Ownership']=data_test['Home Ownership'].apply(lambda x: 'OWN' if x in ['ANY'] else x) # 'Home Ownership': Corregir el desbalance con ANY pasandolo a OWN.\n",
    "for col in cols_con_nulos_cat: # Creación recursiva de varables dummy para el resto de varibles categóricas.\n",
    "    data_test=data_test.join(pd.get_dummies(data_test[col],drop_first=True))\n",
    "data_test.drop(cols_con_nulos_cat,axis=1,inplace=True) # Eliminacion de variable categóricas originales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definicion de X e Y en test.csv para ajustar a los modelos\n",
    "X_test=data_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Algoritmos de _Machine Learning_\n",
    "El problema al que nos enfrentamos es un problema de clasificación.\n",
    "Los algoritmos de _Machine Learning_ más usados para este tipo de problemas son:\n",
    "\n",
    "* Regresión Logistica.\n",
    "* Random Forest (Bosques aleatorios)\n",
    "* Light GBM (Modelos de Aumento de Gradiente)\n",
    "\n",
    "La teoría detras de estos algoritmos descanza en las disciplinas de la estadística y las ciencias de la computación, específicamente a la Teoría de la Información y tiene, como tal, una complejidad científica moderada.\n",
    "\n",
    "El modelo final es un modelo de ensamble por votos, que no es nada más que determinar por mayoria la clase a la que pertenecerá una solicitud de crédito.\n",
    "\n",
    "Por ejemplo, si el Light GBM y el Random Forest nos dicen que una solicitud no debe ser aprobada pero la Regresión Logistica indica que si concluimos la evaluación del modelo como **rechazo**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from lightgbm import LGBMClassifier\n",
    "from sklearn.metrics import roc_auc_score,confusion_matrix,classification_report\n",
    "from sklearn.model_selection import learning_curve,StratifiedKFold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=10, class_weight='balanced', dual=False,\n",
       "          fit_intercept=True, intercept_scaling=1, max_iter=100,\n",
       "          multi_class='warn', n_jobs=-1, penalty='l2', random_state=51,\n",
       "          solver='liblinear', tol=0.001, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Regresión Logistica:\n",
    "lr=LogisticRegression(C=10, tol=0.001, random_state=51, n_jobs=-1, solver='liblinear', class_weight='balanced')\n",
    "lr.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight='balanced',\n",
       "            criterion='gini', max_depth=14, max_features='auto',\n",
       "            max_leaf_nodes=None, min_impurity_decrease=1e-05,\n",
       "            min_impurity_split=None, min_samples_leaf=100,\n",
       "            min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "            n_estimators=150, n_jobs=-1, oob_score=False, random_state=51,\n",
       "            verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Random Forest\n",
    "rfc=RandomForestClassifier(n_estimators=150, max_depth=14, max_leaf_nodes=None, min_impurity_decrease=1e-05, min_samples_leaf=100, class_weight='balanced'\n",
    "                          ,n_jobs=-1, random_state=51)\n",
    "rfc.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LGBMClassifier(boosting_type='gbdt', class_weight={0: 1, 1: 4},\n",
       "        colsample_bytree=1, importance_type='split', learning_rate=0.1,\n",
       "        max_depth=7, min_child_samples=20, min_child_weight=0.001,\n",
       "        min_split_gain=0, n_estimators=100, n_jobs=-1, num_leaves=31,\n",
       "        objective=None, random_state=51, reg_alpha=13, reg_lambda=0.0,\n",
       "        silent=True, subsample=1.0, subsample_for_bin=200000,\n",
       "        subsample_freq=0)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Light GBM\n",
    "lgb=LGBMClassifier(random_state=51, class_weight={0:1, 1:4}, colsample_bytree=1, max_depth=7\n",
    "                   , min_child_samples=20, min_split_gain=0, n_estimators=100, reg_alpha=13)\n",
    "lgb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ya tenemos los 3 modelos, ahora los pondremos a prueba con los datos de testeo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Regresion Logistica\n",
    "y_test_pred_lr=lr.predict(X_test)\n",
    "\n",
    "# Random Forest\n",
    "y_test_pred_rfc=rfc.predict(X_test)\n",
    "\n",
    "# LightGBM\n",
    "y_test_pred_lgb=lgb.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Votación\n",
    "resultado=pd.DataFrame(index=X_test.index)\n",
    "resultado['lr']=y_test_pred_lr\n",
    "resultado['rfc']=y_test_pred_rfc\n",
    "resultado['lgb']=y_test_pred_lgb\n",
    "resultado['cuenta']=resultado.sum(axis=1)\n",
    "resultado['Approve Loan']=resultado['cuenta'].apply(lambda x:1 if x>=3 else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Guardamos el output para revision de Independencia.\n",
    "#df_c = pd.concat([df_a.reset_index(drop=True), df_b], axis=1)\n",
    "#output_id\n",
    "#resultado['y_pred']\n",
    "outcome=pd.concat([output_id,resultado['Approve Loan']],axis=1)\n",
    "outcome.to_csv('outcome.csv',index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## E, de Evaluar:\n",
    "\n",
    "Lo usual es que en el conjunto de datos de test tengamos unos valores reales de la variable a predecir, en este caso sobre la aprobación o rechazo de las solicitudes de crédito.\n",
    "\n",
    "Las gráficas para evaluar el desempeño del modelo respecto de la realidad son:\n",
    "\n",
    "* El Área Bajo la Curva (AUC)\n",
    "* Característica Operativa del Receptor (ROC)\n",
    "\n",
    "Sin embargo no contamos con los valores reales para el conjunto de datos de testeo por lo que no se podrá mostrar dichas curvas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Asumiendo que existiese los valores reales de aceptación o rechazo de la solicitud, se almacenarian en y_test.\n",
    "# Este sería el código para mostrar los gráficos.\n",
    "print(classification_report(y_test, resultado['y_pred']))\n",
    "print('ROC-AUC:', round(roc_auc_score(y_test, resultado['y_pred']),4))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
